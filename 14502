#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

int space[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};
int map[8][8];
int safe = 0;
int n,m;
vector<pair<int,int> > virus;

void bfs(int r,int c){
        queue<pair<int,int> > que;
        que.push({r,c});
        while(!que.empty()){
                int new_r = que.front().first;
                int new_c = que.front().second;
                que.pop();
                for(int i=0;i<4;i++){
                        int next_r = new_r+space[i][0];
                        int next_c = new_c+space[i][0];
                        if(next_r >=0 && next_r < n && next_c >= 0 && next_c < c && map[next_r][next_c] == 0){
                                que.push({next_r,next_c});
                                map[next_r][next_c] = 2;
                        }
                }
        }
}

void wall3(int wall,int s,int e,int map1[][8]){
        if(s == e){
                copy(&map1[0][0],&map1[0][0]+64,&map[0][0]);
                int c =0;
                for(int i=0;i<virus.size();i++) bfs(virus[i].first,virus[i].second);
                for(int i=0;i<n;i++){
                        for(int j=0;j<m;j++){
                                if(map[i][j] ==0) c++;
                        }
                }
                safe = max(safe,c);
                return;
        }
        for(int i=wall;i<n*m;i++){
                if(map1[i/m][i%m] != 0) continue;
                map1[i/m][i%m] = 1;
                wall3(i,s+1,e,map1);
                map1[i/m][i%m]=0;
        }
}

int main(){
        int map1[8][8];
        cin >> n >> m;
        for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                        cin >> map1[i][j];
                        if(map1[i][j] == 2) virus.push_back({i,j});
                }
            }
        wall3(0,0,3,map1);
        cout << safe;
}
